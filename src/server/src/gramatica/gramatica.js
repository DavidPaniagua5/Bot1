/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,11],$V6=[1,12],$V7=[1,16],$V8=[1,17],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,19],$Vd=[1,28],$Ve=[5,14,15,16,17,18,19,27,65,69,70,72,74,75,78,83],$Vf=[1,50],$Vg=[1,46],$Vh=[1,47],$Vi=[1,48],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[19,56],$Vp=[23,32,56,80],$Vq=[23,31,32,33,56,80],$Vr=[1,72],$Vs=[23,31,32,33,35,56,80],$Vt=[1,73],$Vu=[1,74],$Vv=[23,31,32,33,35,37,39,56,80],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[23,31,32,33,35,37,39,40,42,43,44,56,80],$VB=[1,79],$VC=[1,80],$VD=[23,31,32,33,35,37,39,40,42,43,44,45,47,56,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[23,31,32,33,35,37,39,40,42,43,44,45,47,48,50,51,56,80],$VI=[23,31,32,33,35,37,39,40,42,43,44,45,47,48,50,51,53,56,80],$VJ=[56,80],$VK=[1,135],$VL=[5,14,15,16,17,18,19,27,65,69,70,72,73,74,75,78,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DECLARACION":7,"ASIGNACION":8,"SENTENCIA_INCREMENTO_DECREMENTO":9,"IMPRIMIR":10,"CONTROL_FLUJO":11,"FUNCION_DEFINICION":12,"TIPO":13,"r_entero":14,"r_decimal":15,"r_booleano":16,"r_caracter":17,"r_cadena":18,"identificador":19,"r_con":20,"r_valor":21,"EXPRESION":22,"punto_coma":23,"asignacion":24,"incremento":25,"decremento":26,"r_imprimir":27,"r_nl":28,"TERNARIO":29,"EXP_LOGICA":30,"interrogacion":31,"dos_puntos":32,"or":33,"EXP_LOGICA_AND":34,"and":35,"EXP_IGUALDAD":36,"igual_igual":37,"EXP_RELACIONAL":38,"diferente":39,"menor":40,"EXP_SUMA":41,"mayor":42,"menor_igual":43,"mayor_igual":44,"mas":45,"EXP_MULT":46,"menos":47,"multiplicacion":48,"EXP_POTENCIA":49,"division":50,"modulo":51,"FACTOR":52,"potencia":53,"not":54,"paren_izq":55,"paren_der":56,"LLAMADA_FUNCION":57,"numero":58,"cadena_literal":59,"caracter_literal":60,"r_verdadero":61,"r_falso":62,"BLOQUE":63,"llave_izq":64,"llave_der":65,"SENTENCIA_IF":66,"SENTENCIA_WHILE":67,"SENTENCIA_FOR":68,"r_romper":69,"r_continuar":70,"SENTENCIA_RETORNO":71,"r_si":72,"r_sino":73,"r_mientras":74,"r_para":75,"DECLARACION_FOR":76,"ASIGNACION_FOR":77,"r_funcion":78,"LISTA_PARAMETROS":79,"coma":80,"PARAMETRO":81,"LISTA_EXPRESIONES":82,"r_retornar":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"r_entero",15:"r_decimal",16:"r_booleano",17:"r_caracter",18:"r_cadena",19:"identificador",20:"r_con",21:"r_valor",23:"punto_coma",24:"asignacion",25:"incremento",26:"decremento",27:"r_imprimir",28:"r_nl",31:"interrogacion",32:"dos_puntos",33:"or",35:"and",37:"igual_igual",39:"diferente",40:"menor",42:"mayor",43:"menor_igual",44:"mayor_igual",45:"mas",47:"menos",48:"multiplicacion",50:"division",51:"modulo",53:"potencia",54:"not",55:"paren_izq",56:"paren_der",58:"numero",59:"cadena_literal",60:"caracter_literal",61:"r_verdadero",62:"r_falso",64:"llave_izq",65:"llave_der",69:"r_romper",70:"r_continuar",72:"r_si",73:"r_sino",74:"r_mientras",75:"r_para",78:"r_funcion",80:"coma",83:"r_retornar"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[13,1],[13,1],[13,1],[13,1],[13,1],[7,6],[8,4],[9,3],[9,3],[10,4],[10,3],[22,1],[29,5],[29,1],[30,3],[30,1],[34,3],[34,1],[36,3],[36,3],[36,1],[38,3],[38,3],[38,3],[38,3],[38,1],[41,3],[41,3],[41,1],[46,3],[46,3],[46,3],[46,1],[49,3],[49,1],[52,2],[52,2],[52,3],[52,4],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[63,3],[63,2],[11,1],[11,1],[11,1],[11,2],[11,2],[11,1],[66,7],[66,7],[66,5],[67,5],[68,9],[76,4],[77,3],[77,2],[77,2],[12,6],[12,5],[79,3],[79,1],[81,2],[57,4],[57,3],[82,3],[82,1],[71,3],[71,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            this.$ = new Nodo('PROGRAMA', null, $$[$0-1], this._$.first_line, this._$.first_column);
            return this.$;
        
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 21: case 23: case 25: case 27: case 30: case 35: case 38: case 42: case 44: case 49: case 58: case 59: case 60: case 63:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = { tipo: 'entero', valor: $$[$0] }; 
break;
case 11:
 this.$ = { tipo: 'decimal', valor: $$[$0] }; 
break;
case 12:
 this.$ = { tipo: 'booleano', valor: $$[$0] }; 
break;
case 13:
 this.$ = { tipo: 'caracter', valor: $$[$0] }; 
break;
case 14:
 this.$ = { tipo: 'cadena', valor: $$[$0] }; 
break;
case 15:

            this.$ = new Nodo('DECLARACION', $$[$0-5].tipo, [
                new Nodo('IDENTIFICADOR', $$[$0-4], [], _$[$0-4].first_line, _$[$0-4].first_column),
                $$[$0-1]
            ], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 16:

            this.$ = new Nodo('ASIGNACION', null, [
                new Nodo('IDENTIFICADOR', $$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column),
                $$[$0-1]
            ], _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 17:

            this.$ = new Nodo('INCREMENTO', null, [
                new Nodo('IDENTIFICADOR', $$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column)
            ], _$[$0-1].first_line, _$[$0-1].first_column);
        
break;
case 18:

            this.$ = new Nodo('DECREMENTO', null, [
                new Nodo('IDENTIFICADOR', $$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column)
            ], _$[$0-1].first_line, _$[$0-1].first_column);
        
break;
case 19:
 this.$ = new Nodo('IMPRIMIR', 'nl', [$$[$0-1]], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 20:
 this.$ = new Nodo('IMPRIMIR', 'sin_nl', [$$[$0-1]], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 22:
 this.$ = new Nodo('TERNARIO', null, [$$[$0-4], $$[$0-2], $$[$0]], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 24:
 this.$ = new Nodo('OR', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 26:
 this.$ = new Nodo('AND', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 28:
 this.$ = new Nodo('IGUAL', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 29:
 this.$ = new Nodo('DIFERENTE', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 31:
 this.$ = new Nodo('MENOR', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 32:
 this.$ = new Nodo('MAYOR', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 33:
 this.$ = new Nodo('MENOR_IGUAL', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 34:
 this.$ = new Nodo('MAYOR_IGUAL', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 36:
 this.$ = new Nodo('MAS', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 37:
 this.$ = new Nodo('MENOS', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 39:
 this.$ = new Nodo('MULTIPLICACION', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 40:
 this.$ = new Nodo('DIVISION', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 41:
 this.$ = new Nodo('MODULO', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 43:
 this.$ = new Nodo('POTENCIA', null, [$$[$0-2], $$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
 this.$ = new Nodo('MENOS_UNARIO', null, [$$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 46:
 this.$ = new Nodo('NOT', null, [$$[$0]], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
 this.$ = $$[$0-1]; 
break;
case 48:
 this.$ = new Nodo('CASTEO', $$[$0-2].tipo, [$$[$0]], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 50:
 this.$ = new Nodo('IDENTIFICADOR', $$[$0], [], _$[$0].first_line, _$[$0].first_column); 
break;
case 51:

            const esDecimal = $$[$0].includes('.');
            const tipo = esDecimal ? 'decimal' : 'entero';
            const valor = esDecimal ? parseFloat($$[$0]) : parseInt($$[$0]);
            this.$ = new Nodo('NUMERO', valor, [], _$[$0].first_line, _$[$0].first_column, tipo);
        
break;
case 52:
 this.$ = new Nodo('CADENA', $$[$0].slice(1, -1), [], _$[$0].first_line, _$[$0].first_column); 
break;
case 53:
 this.$ = new Nodo('CARACTER', $$[$0].slice(1, -1), [], _$[$0].first_line, _$[$0].first_column); 
break;
case 54:
 this.$ = new Nodo('BOOLEANO', true, [], _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
 this.$ = new Nodo('BOOLEANO', false, [], _$[$0].first_line, _$[$0].first_column); 
break;
case 56:
 this.$ = new Nodo('BLOQUE', null, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 57:
 this.$ = new Nodo('BLOQUE', null, [], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 61:
 this.$ = new Nodo('ROMPER', null, [], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 62:
 this.$ = new Nodo('CONTINUAR', null, [], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 64: case 65:
 this.$ = new Nodo('IF_ELSE', null, [$$[$0-4], $$[$0-2], $$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 66:
 this.$ = new Nodo('IF', null, [$$[$0-2], $$[$0]], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 67:
 this.$ = new Nodo('WHILE', null, [$$[$0-2], $$[$0]], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 68:
 this.$ = new Nodo('FOR', null, [$$[$0-6], $$[$0-4], $$[$0-2], $$[$0]], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 69:

            this.$ = new Nodo('DECLARACION', $$[$0-3].tipo, [
                new Nodo('IDENTIFICADOR', $$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column),
                $$[$0]
            ], _$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 70:

            this.$ = new Nodo('ASIGNACION_INLINE', null, [
                new Nodo('IDENTIFICADOR', $$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column),
                $$[$0]
            ], _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 71:

            this.$ = new Nodo('INCREMENTO_INLINE', null, [
                new Nodo('IDENTIFICADOR', $$[$0-1], [], _$[$0-1].first_line, _$[$0-1].first_column)
            ], _$[$0-1].first_line, _$[$0-1].first_column);
        
break;
case 72:

            this.$ = new Nodo('DECREMENTO_INLINE', null, [
                new Nodo('IDENTIFICADOR', $$[$0-1], [], _$[$0-1].first_line, _$[$0-1].first_column)
            ], _$[$0-1].first_line, _$[$0-1].first_column);
        
break;
case 73:
 this.$ = new Nodo('FUNCION_DEFINICION', $$[$0-4], [$$[$0-2], $$[$0]], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 74:
 this.$ = new Nodo('FUNCION_DEFINICION', $$[$0-3], [new Nodo('LISTA_PARAMETROS', null, [], _$[$0-2].first_line, _$[$0-2].first_column), $$[$0]], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 75: case 80:
 $$[$0-2].hijos.push($$[$0]); this.$ = $$[$0-2]; 
break;
case 76:
 this.$ = new Nodo('LISTA_PARAMETROS', null, [$$[$0]], _$[$0].first_line, _$[$0].first_column); 
break;
case 77:
 this.$ = new Nodo('PARAMETRO', $$[$0-1].tipo, [new Nodo('IDENTIFICADOR', $$[$0], [], _$[$0].first_line, _$[$0].first_column)], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 78:
 this.$ = new Nodo('LLAMADA', $$[$0-3], $$[$0-1].hijos, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 79:
 this.$ = new Nodo('LLAMADA', $$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = new Nodo('LISTA_EXPRESIONES', null, [$$[$0]], _$[$0].first_line, _$[$0].first_column); 
break;
case 82:
 this.$ = new Nodo('RETORNO', null, [$$[$0-1]], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = new Nodo('RETORNO', null, [], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,27:$V6,66:13,67:14,68:15,69:$V7,70:$V8,71:18,72:$V9,74:$Va,75:$Vb,78:$Vc,83:$Vd},{1:[3]},{5:[1,29],6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,27:$V6,66:13,67:14,68:15,69:$V7,70:$V8,71:18,72:$V9,74:$Va,75:$Vb,78:$Vc,83:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),{19:[1,31]},{24:[1,32],25:[1,33],26:[1,34]},{19:$Vf,22:36,28:[1,35],29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Ve,[2,58]),o($Ve,[2,59]),o($Ve,[2,60]),{23:[1,56]},{23:[1,57]},o($Ve,[2,63]),{19:[1,58]},o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),{55:[1,59]},{55:[1,60]},{55:[1,61]},{19:$Vf,22:62,23:[1,63],29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{1:[2,1]},o($Ve,[2,2]),{20:[1,64]},{19:$Vf,22:65,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{23:[1,66]},{23:[1,67]},{19:$Vf,22:68,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{23:[1,69]},o($Vp,[2,21]),o($Vp,[2,23],{31:[1,70],33:[1,71]}),o($Vq,[2,25],{35:$Vr}),o($Vs,[2,27],{37:$Vt,39:$Vu}),o($Vv,[2,30],{40:$Vw,42:$Vx,43:$Vy,44:$Vz}),o($VA,[2,35],{45:$VB,47:$VC}),o($VD,[2,38],{48:$VE,50:$VF,51:$VG}),o($VH,[2,42]),o($VH,[2,44],{53:[1,84]}),{19:$Vf,47:$Vg,52:85,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,47:$Vg,52:86,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:88,14:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$Vf,22:87,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($VI,[2,49]),o($VI,[2,50],{55:[1,89]}),o($VI,[2,51]),o($VI,[2,52]),o($VI,[2,53]),o($VI,[2,54]),o($VI,[2,55]),o($Ve,[2,61]),o($Ve,[2,62]),{55:[1,90]},{19:$Vf,22:91,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,22:92,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{13:94,14:$V0,15:$V1,16:$V2,17:$V3,18:$V4,76:93},{23:[1,95]},o($Ve,[2,83]),{21:[1,96]},{23:[1,97]},o($Ve,[2,17]),o($Ve,[2,18]),{23:[1,98]},o($Ve,[2,20]),{19:$Vf,22:99,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,34:100,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,36:101,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,38:102,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,38:103,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,41:104,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,41:105,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,41:106,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,41:107,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,46:108,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,46:109,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,47:$Vg,49:110,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,47:$Vg,49:111,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,47:$Vg,49:112,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{19:$Vf,47:$Vg,49:113,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($VI,[2,45]),o($VI,[2,46]),{56:[1,114]},{56:[1,115]},{19:$Vf,22:118,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,56:[1,117],57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,82:116},{13:122,14:$V0,15:$V1,16:$V2,17:$V3,18:$V4,56:[1,120],79:119,81:121},{56:[1,123]},{56:[1,124]},{23:[1,125]},{19:[1,126]},o($Ve,[2,82]),{19:$Vf,22:127,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Ve,[2,16]),o($Ve,[2,19]),{32:[1,128]},o($Vq,[2,24],{35:$Vr}),o($Vs,[2,26],{37:$Vt,39:$Vu}),o($Vv,[2,28],{40:$Vw,42:$Vx,43:$Vy,44:$Vz}),o($Vv,[2,29],{40:$Vw,42:$Vx,43:$Vy,44:$Vz}),o($VA,[2,31],{45:$VB,47:$VC}),o($VA,[2,32],{45:$VB,47:$VC}),o($VA,[2,33],{45:$VB,47:$VC}),o($VA,[2,34],{45:$VB,47:$VC}),o($VD,[2,36],{48:$VE,50:$VF,51:$VG}),o($VD,[2,37],{48:$VE,50:$VF,51:$VG}),o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),o($VH,[2,43]),o($VI,[2,47]),{19:$Vf,47:$Vg,52:129,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{56:[1,130],80:[1,131]},o($VI,[2,79]),o($VJ,[2,81]),{56:[1,132],80:[1,133]},{63:134,64:$VK},o($VJ,[2,76]),{19:[1,136]},{63:137,64:$VK},{63:138,64:$VK},{19:$Vf,22:139,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{24:[1,140]},{23:[1,141]},{19:$Vf,22:142,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($VI,[2,48]),o($VI,[2,78]),{19:$Vf,22:143,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{63:144,64:$VK},{13:122,14:$V0,15:$V1,16:$V2,17:$V3,18:$V4,81:145},o($Ve,[2,74]),{4:146,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,27:$V6,65:[1,147],66:13,67:14,68:15,69:$V7,70:$V8,71:18,72:$V9,74:$Va,75:$Vb,78:$Vc,83:$Vd},o($VJ,[2,77]),o($Ve,[2,66],{73:[1,148]}),o($Ve,[2,67]),{23:[1,149]},{19:$Vf,22:150,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($Ve,[2,15]),o($Vp,[2,22]),o($VJ,[2,80]),o($Ve,[2,73]),o($VJ,[2,75]),{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,27:$V6,65:[1,151],66:13,67:14,68:15,69:$V7,70:$V8,71:18,72:$V9,74:$Va,75:$Vb,78:$Vc,83:$Vd},o($VL,[2,57]),{63:153,64:$VK,66:152,72:$V9},{19:[1,155],77:154},{23:[2,69]},o($VL,[2,56]),o($Ve,[2,64]),o($Ve,[2,65]),{56:[1,156]},{24:[1,157],25:[1,158],26:[1,159]},{63:160,64:$VK},{19:$Vf,22:161,29:37,30:38,34:39,36:40,38:41,41:42,46:43,47:$Vg,49:44,52:45,54:$Vh,55:$Vi,57:49,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{56:[2,71]},{56:[2,72]},o($Ve,[2,68]),{56:[2,70]}],
defaultActions: {29:[2,1],150:[2,69],158:[2,71],159:[2,72],161:[2,70]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const Nodo = require('../analizador_semantico/abstract/nodo');
    const ErrorL = require('../Errores/ErrorL');
   
    function inicializarErrores(yy) {
        if (!yy.listaErrores) {
            yy.listaErrores = [];
        }
    }
   
    function registrarErrorSintactico(yy, mensaje, linea, columna) {
        if (yy && yy.gestorErrores) {
            yy.gestorErrores.agregarSintactico(mensaje, linea, columna);
        } else {
            if (!yy.listaErrores) yy.listaErrores = [];
            yy.listaErrores.push(new ErrorL('Sintáctico', mensaje, linea, columna));
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar comentario de línea */
break;
case 1:/* ignorar comentario multilínea */
break;
case 2:return 14;
break;
case 3:return 15;
break;
case 4:return 16;
break;
case 5:return 17;
break;
case 6:return 18;
break;
case 7:return 27;
break;
case 8:return 20;
break;
case 9:return 21;
break;
case 10:return 28;
break;
case 11:return 72;
break;
case 12:return 73;
break;
case 13:return 74;
break;
case 14:return 75;
break;
case 15:return 78;
break;
case 16:return 83;
break;
case 17:return 69;
break;
case 18:return 70;
break;
case 19:return 61;
break;
case 20:return 62;
break;
case 21:return 25;
break;
case 22:return 26;
break;
case 23:return 45;
break;
case 24:return 47;
break;
case 25:return 48;
break;
case 26:return 50;
break;
case 27:return 51;
break;
case 28:return 53;
break;
case 29:return 37;
break;
case 30:return 39;
break;
case 31:return 43;
break;
case 32:return 44;
break;
case 33:return 40;
break;
case 34:return 42;
break;
case 35:return 35;
break;
case 36:return 33;
break;
case 37:return 54;
break;
case 38:return 24;
break;
case 39:return 23;
break;
case 40:return 55;
break;
case 41:return 56;
break;
case 42:return 64;
break;
case 43:return 65;
break;
case 44:return 80;
break;
case 45:return 31;
break;
case 46:return 32;
break;
case 47:return 58;
break;
case 48:return 60;
break;
case 49:return 59;
break;
case 50:return 19;
break;
case 51:/* ignorar */
break;
case 52:/* ignorar (Jison maneja líneas) */
break;
case 53:return 5;
break;
case 54:
    // Registrar el error pero NO detener el análisis
    if (yy && yy.gestorErrores) {
        yy.gestorErrores.agregarLexico(
            "Carácter no reconocido: '" + yy_.yytext + "'",
            yy_.yylineno + 1,
            yy_.yylloc ? yy_.yylloc.first_column + 1 : 0
        );
    } else {
        if (!yy.listaErrores) yy.listaErrores = [];
        const ErrorL = require('../Errores/ErrorL');
        yy.listaErrores.push(new ErrorL(
            'Léxico',
            "Carácter no reconocido: '" + yy_.yytext + "'",
            yy_.yylineno + 1,
            yy_.yylloc ? yy_.yylloc.first_column + 1 : 0
        ));
    }

break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:booleano\b)/,/^(?:caracter\b)/,/^(?:cadena\b)/,/^(?:imprimir\b)/,/^(?:con\b)/,/^(?:valor\b)/,/^(?:nl\b)/,/^(?:si\b)/,/^(?:sino\b)/,/^(?:mientras\b)/,/^(?:para\b)/,/^(?:funcion\b)/,/^(?:retornar\b)/,/^(?:romper\b)/,/^(?:continuar\b)/,/^(?:Verdadero\b)/,/^(?:Falso\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'([^'\\]|\\n|\\t|\\"|\\'|\\\\)')/,/^(?:"([^"\\]|\\.)*")/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[ \t\r]+)/,/^(?:\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}